#!/usr/bin/env ruby

require_relative 'keychain_storage'

def die(msg)
  STDERR.puts msg
  exit 1
end

# TODO DRY /w clean_secrets_filter
FNAME = ARGV[0]
SECRETS_PATH = File.join(`git rev-parse --show-toplevel`.chomp, '.gitsecrets')
REPO_NAME = [
  `git config filter.secrets.reponame`.chomp,
  File.basename(`git rev-parse --show-toplevel`.chomp)
].reject(&:empty?).first
STDERR.puts "File #{SECRETS_PATH} not found; skipping filter" unless File.exists? SECRETS_PATH

secrets = SecretsMap.new(SECRETS_PATH).for_path(FNAME) if File.exists?(SECRETS_PATH)
keychain = Secrets::KeychainStore.new
matcher = /\b(#{secrets.keys.map {|k| Regexp.quote k}.join('|')})\b/ if secrets

STDIN.each do |line|
  if matcher and line =~ matcher
    name = $1
    key = secrets[name]
    saved_secret = keychain.find(name, key)
    if saved_secret
      line = line.gsub(/\$secret\(#{name}\)/, saved_secret)
      STDERR.puts "smudged #{name}" if ENV['DEBUG_GIT_SECRETS']
    else
      STDERR.puts "Warning: #{name} not smudged; no entry in keychain for #{key}"
    end
    puts line
  elsif line =~ /\$secret\(\S+?\)/
    STDERR.puts "Warning: #{$1} not smudged; no entry in #{SECRETS_PATH}"
  else
    puts line
  end
end
